Stage 1:
move inits to declarations where possible
Make plugin behave as package testing, just plug the stuff
Add internal router, fix recursive connect
Add intercept checker in the right spots
Allow the user to change the destination endpoint
Serve the certificates on a specific fake host/path
test the request duration limit to servers
Default to bare sockets on error
Look for fixmes and todos in the code
Unit testing
Add/Update Doc
Improve README
Add req ID to editor and reject unexpected requests
Move all constant strings to actual constants
Fix colResizable problems
Make ui operations unblocking and detect ui freezes/deaths. If channel is full and not being read, kill the client.
Send the whole status on ui connect
UI work on problem "problem" of duplicate receives event
UI show req/res on click on history row
UI sortable resizable table
UI Sanitize metadata server-side
UI autodetect changes in proxybuffer and merge the two "forward" buttons
UI show already pending request/response upon connection
UI error log
UI auto-open ui in browser on launch
profile the code, try to find limit-cases
Publish

Stage 2:
Add Save/Load
Add Scoping
Add Repeater
Add History filter
Add cURL converter
Add Intruder
Add AutoEdit

Stage 3:
UI Add Decoder
Add Spider (remember to add timeouts ยง8.10)
Add pre-engagement analysis
Add a Pathfinder feature to spider that allows to backtrace how a certain URL was discovered
Add Scanner
Add Mock Server
Add recursive intruder with flows

Misc:
Add Content-Length override?
Add Beautifier?
Decompress HTTP2 instead of disabling it?
All the deferred closes if err!= nil send that, otherwise propagate the new one
Handle panics within the package
Doc comment should be a complete sentence that starts with the name being declared.
