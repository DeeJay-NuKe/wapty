c:ExternalClient
irw:interceptRequestWrapper
mp:mitm.Proxy
rsq:RequestQueue
dp:dispatchLoop
mt:ModifiedTransport
rpq:ResponseQueue
s:ExternalServer

c:mp.Original Request
mp:Edited/Original Request=irw.Original Request
irw:
irw:Add ID header to Request
irw:Save request
[c:alt intercept is true]
	irw:Add Intercepted header to reques
	irw:
	irw:Edited Request / nil=rsq.OriginalRequest
	rsq:Edited Request / nil=dp.Original Request
	dp:User Edits Request and/or forwards
	irw:Save Edited Request if not nil
[/c]
mp:Edited/Original Response=mt.Request
mt:
mt:Remove Wapty headers
mt:Original Response =s.Request
[c:alt request was intercepted]
	mt:Edited Response/nil=rpq.Original Response
	rpq:Edited Response/nil=dp.Original Response
	dp:
	dp:User Edits Response and/or forwards
	mt:
	mt:Save Edited Response if not nil
[/c]
mp:c.Edited / Original Response




	ExternalClient:w->mitmProxy[label="1 Original Request", constraint=false];
	mitmProxy -> interceptRequestWrapper[label="2 Original Request", constraint=false];
	interceptRequestWrapper -> RequestQueue[label="3 if intercept\nOriginal Request", constraint=false];
	RequestQueue -> dispatchLoop[label="4 Original Request", constraint=false];
	dispatchLoop -> interceptRequestWrapper[label="5 Edited Request", constraint=false];
	interceptRequestWrapper -> mitmProxy[label="6 Edited? Request"];
	mitmProxy -> modifiedTransport[label="7 Request"];
	modifiedTransport -> ExternalServer[label="8 Request"];
	ExternalServer -> modifiedTransport[label="9 Original Response", constraint=false];
	modifiedTransport -> ResponseQueue[label = "10 if req was intercepted\nsends Original Response", constraint=false];
	ResponseQueue -> dispatchLoop[label = "11 Original Response", constraint=false];
	dispatchLoop -> modifiedTransport[label = "12 Edited Response", constraint=false];
	modifiedTransport -> mitmProxy[label = "13 Edited? Response", constraint=false];
	mitmProxy ->ExternalClient:e[label = "14 Edited? Response", constraint=false];

