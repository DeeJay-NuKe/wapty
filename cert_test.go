// Code generated by go-bindata.
// sources:
// cert.pem
// key.pem
// DO NOT EDIT!

package mitm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _certPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\x4f\x8f\xa2\x40\x10\xc5\xef\x7c\x8a\xbd\x9b\x8d\x83\x18\x47\x0e\x73\xa8\xea\xee\x81\xc6\x6d\xb0\xa1\x81\x81\x9b\xc2\xda\x8a\x1a\x87\x3f\xda\xea\xa7\x5f\xc7\x4c\xf6\xb0\x5b\xa7\xca\xef\x25\x95\x7a\x2f\xef\xe7\xd7\x20\xf3\x78\xf8\x83\xb0\x58\xf1\x77\x4e\x40\xb1\x27\xb5\x04\xe7\x58\xdf\x09\x81\x78\xa6\xc1\x70\x04\xcd\xa5\x72\xdb\xeb\x28\x29\xf5\xd2\xec\xf6\x4e\x35\x28\x3b\x39\x06\x41\x03\x0b\xd4\xba\xdd\xee\x9b\x68\x29\x25\x85\x06\x12\x11\x83\xb1\xa8\x2e\x68\x26\xe5\x82\x99\x1a\x8b\x89\x7d\xe0\x2c\xbc\x08\x9c\x7e\x50\xc5\x26\x82\x6a\x13\x29\xb8\x85\x4a\x5f\xa3\xec\xf4\xc5\x9c\x7f\x98\xb1\x58\xc3\xa4\x80\xa9\x07\x76\xca\xc8\x56\xf8\x32\x0f\x87\x32\x41\xba\xbe\x63\x29\x50\x78\x78\x6b\xbd\x44\x4c\x5d\xd0\xcc\x23\xe4\x7b\x37\xcc\x87\x17\x0e\x28\xe6\x1b\x6b\xf8\xed\x1d\x97\xc7\x11\x49\xb3\x73\x50\x5f\x8a\xcd\x91\x84\xa7\x93\x5f\xd1\x79\xe9\x54\xf5\xcc\x7b\x75\x57\x65\xb9\xfe\x00\xf7\xbe\x3d\xbe\x84\xed\xaf\x86\xf7\x49\xd7\x7d\xae\xbd\x0e\x2f\x66\x8e\xb4\xb7\x84\x8a\x61\x38\xe8\xdd\x81\x67\xd1\xf2\x75\xe0\xe3\x6b\xde\x64\x0d\xa6\xdf\x5f\xd5\xd4\x30\x1c\x1b\xc9\x1e\xf9\x90\x4f\x0a\x0a\x75\x98\xf9\x49\xca\x28\x7d\x66\xd2\x59\xa8\xd9\x3b\xca\xea\x21\xc1\xf2\x29\xc6\x02\x61\x33\x67\xa8\x80\x82\xf4\xc7\x02\xcd\xf3\x10\x93\x32\x13\x18\x11\x32\xc9\xa6\x45\x6e\x9b\xb5\x97\x9e\x8b\x89\x3b\x58\x5b\x13\x8f\x01\x1e\x76\xe0\xf4\xd7\x23\x82\x20\xf0\x52\x81\x60\x92\x70\x4a\x43\x27\x08\x3a\x47\x06\x8e\x7d\xdb\x6b\xde\xf7\x37\xb7\x1f\xd6\x7b\x41\x26\x35\xf2\xc8\xaa\x16\xf9\xce\xeb\x0f\xbc\x8a\x57\x36\xec\x70\x11\x97\xe9\x7c\x5a\x8d\x10\xdd\x9c\x8e\xf3\xd6\x3d\x0b\xca\x9a\x19\xbf\x76\xad\xed\x8c\x4c\x56\xe4\xfe\x8a\x52\xff\x7c\x3e\xc1\xdb\x9b\xf5\x6c\x02\x0b\xe9\xff\xed\xf8\x13\x00\x00\xff\xff\x76\xae\x26\xc2\x3a\x02\x00\x00")

func certPemBytes() ([]byte, error) {
	return bindataRead(
		_certPem,
		"cert.pem",
	)
}

func certPem() (*asset, error) {
	bytes, err := certPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cert.pem", size: 570, mode: os.FileMode(420), modTime: time.Unix(1470711499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x4f\x4f\x83\x30\x1c\x40\xef\x7c\x0a\xee\xc4\x20\xa5\x26\xee\xb0\x43\x2d\xbf\x75\xb5\xe1\x4f\x51\x46\xf0\x46\x57\x32\xb6\xd4\xd5\x39\x6b\x9b\x7d\x7a\x23\xe7\xbd\xeb\xbb\xbc\xf7\xf0\xcf\x0b\x30\x5e\xc5\x40\xe3\xa6\xe5\x3b\xf2\x0e\xb1\x80\x61\x11\x51\xb9\xdd\x53\x22\x01\x38\x1f\xc6\x9b\x16\x13\x9a\x70\xde\x4f\xc9\x79\x3e\x6d\x54\x96\x7f\x9b\x46\x7d\x5e\x4a\x65\xea\x0f\xfd\xdc\x56\x7a\x7c\x12\xf5\x4e\x5b\x62\x19\xa5\x17\xf6\x56\xe2\x55\x44\x3c\x6c\x6d\x27\x0b\x79\x20\x70\x0b\x49\x86\xc7\x21\x51\xf8\xb5\xed\xb1\x41\xab\x39\x19\x38\x3a\x1e\xb4\x6f\xc2\x59\x87\xdc\xaa\xdf\xec\xcb\x98\x9f\x7d\x91\xd7\x4c\x49\x64\x5d\x79\x8c\x82\x70\xce\x5c\xc7\x2b\x4b\x0b\x0f\xb5\x0f\x15\x50\xd4\x53\xd1\xcd\x1d\x4e\xdd\xe3\x29\xdd\xc8\xf5\x3a\x5a\x62\xa1\x2a\xee\x3e\xfc\x05\x00\x00\xff\xff\x2a\x3c\xf0\x0f\xe3\x00\x00\x00")

func keyPemBytes() ([]byte, error) {
	return bindataRead(
		_keyPem,
		"key.pem",
	)
}

func keyPem() (*asset, error) {
	bytes, err := keyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "key.pem", size: 227, mode: os.FileMode(384), modTime: time.Unix(1470711499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cert.pem": certPem,
	"key.pem": keyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cert.pem": &bintree{certPem, map[string]*bintree{}},
	"key.pem": &bintree{keyPem, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

